/*
 Copyright 2024 Qiniu Cloud (qiniu.com).

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

package linters

import (
	"context"
	"errors"
	"testing"

	"github.com/google/go-github/v57/github"
)

func TestFilters(t *testing.T) {
	tcs := []struct {
		name        string
		a           []*github.CommitFile
		input       map[string][]LinterOutput
		expected    map[string][]LinterOutput
		expectedErr error
	}{
		{
			name: "filterByPRChanged",
			a: []*github.CommitFile{
				{
					Filename: github.String("pkg/apis/xxx_1.go"),
					Patch:    github.String(`@@ -2,7 +1,7 @@`),
				},
				{
					Filename: github.String(".testdata/xxx_1.go"),
					Patch:    github.String(`@@ -1,7 +1,7 @@`),
				},
			},
			input: map[string][]LinterOutput{
				".testdata/xxx_1.go": {
					{
						Line:    4,
						Column:  16,
						Message: `abc`,
					},
				},
			},
			expected: map[string][]LinterOutput{
				".testdata/xxx_1.go": {
					{
						Line:    4,
						Column:  16,
						Message: `abc`,
					},
				},
			},
			expectedErr: nil,
		},
		{
			name: "filterByAutoGenerated",
			a: []*github.CommitFile{
				{
					Filename: github.String(".testdata/auto.go"),
					Patch:    github.String(`@@ -1,7 +1,7 @@`),
				},
				{
					Filename: github.String(".testdata/xxx_2.go"),
					Patch:    github.String(`@@ -1,7 +1,7 @@`),
				},
			},
			input: map[string][]LinterOutput{
				".testdata/auto.go": {
					{
						Line:    4,
						Column:  16,
						Message: `unknown JSON option "default=abc" (SA5008)`,
					},
				},
			},
			expected:    map[string][]LinterOutput{},
			expectedErr: nil,
		},
		{
			name: "normalCase",
			a: []*github.CommitFile{
				{
					Filename: github.String(".testdata/xxx_1.go"),
					Patch:    github.String(`@@ -1,7 +1,7 @@`),
				},
			},
			input: map[string][]LinterOutput{
				".testdata/xxx_1.go": {
					{
						Line:    4,
						Column:  16,
						Message: `err not used`,
					},
				},
			},
			expected: map[string][]LinterOutput{
				".testdata/xxx_1.go": {
					{
						Line:    4,
						Column:  16,
						Message: `err not used`,
					},
				},
			},
			expectedErr: nil,
		},
		{
			name: "filterByNotInHunk",
			a: []*github.CommitFile{
				{
					Filename: github.String("pkg/apis/xxx_2.go"),
					Patch:    github.String(`@@ -1,3 +1,3 @@`),
				},
			},
			input: map[string][]LinterOutput{
				"pkg/apis/xxx_2.go": {
					{
						Line:    4,
						Column:  16,
						Message: `err not used`,
					},
				},
			},
			expected:    map[string][]LinterOutput{},
			expectedErr: nil,
		},
		{
			name: "filterSA5008",
			a: []*github.CommitFile{
				{
					Filename: github.String(".testdata/xxx_1.go"),
					Patch:    github.String(`@@ -1,7 +1,8 @@`),
				},
				{
					Filename: github.String(".testdata/xxx_2.go"),
					Patch:    github.String(`@@ -1,7 +1,8 @@`),
				},
			},
			input: map[string][]LinterOutput{
				".testdata/xxx_1.go": {
					{
						Line:    4,
						Column:  16,
						Message: `normal error`,
					},
				},
				".testdata/xxx_2.go": {
					{
						Line:    4,
						Column:  16,
						Message: `unknown JSON option "default=abc" (SA5008)`,
					},
				},
			},
			expected: map[string][]LinterOutput{
				".testdata/xxx_1.go": {
					{
						Line:    4,
						Column:  16,
						Message: `normal error`,
					},
				},
			},
			expectedErr: nil,
		},
	}

	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			p, err := NewGithubProvider(context.TODO(), nil, github.PullRequestEvent{}, WithPullRequestChangedFiles(tc.a))
			if err != nil {
				t.Errorf("failed to create github provider: %v", err)
			}
			results, err := Filters(nil, Agent{
				Provider: p,
			}, tc.input)
			if !errors.Is(err, tc.expectedErr) {
				t.Errorf("expected error %v, got %v", tc.expectedErr, err)
			}
			if len(results) != len(tc.expected) {
				t.Errorf("expected %v, got %v", tc.expected, results)
			}
			for file, linterResults := range results {
				if len(linterResults) != len(tc.expected[file]) {
					t.Errorf("expected %v, got %v", tc.expected[file], linterResults)
				}
				for i, linter := range linterResults {
					if linter.Line != tc.expected[file][i].Line {
						t.Errorf("expected %v, got %v", tc.expected[file][i].Line, linter.Line)
					}
					if linter.Column != tc.expected[file][i].Column {
						t.Errorf("expected %v, got %v", tc.expected[file][i].Column, linter.Column)
					}
					if linter.Message != tc.expected[file][i].Message {
						t.Errorf("expected %v, got %v", tc.expected[file][i].Message, linter.Message)
					}
				}
			}
		})
	}
}

func TestLinterRelated(t *testing.T) {
	tcs := []struct {
		name     string
		linter   string
		a        []*github.CommitFile
		langs    []string
		expected bool
	}{
		{
			name:   "related",
			linter: "golangci-lint",
			a: []*github.CommitFile{
				{
					Filename: github.String(".testdata/xxx_1.go"),
				},
			},
			langs:    []string{".go"},
			expected: true,
		},
		{
			name:   "not related",
			linter: "golangci-lint",
			a: []*github.CommitFile{
				{
					Filename: github.String("abc.sh"),
				},
			},
			langs:    []string{".go"},
			expected: false,
		},
		{
			name:   "related",
			linter: "git-flow",
			a: []*github.CommitFile{
				{
					Filename: github.String("abc.sh"),
				},
			},
			langs:    []string{"*"},
			expected: true,
		},
		{
			name:   "related",
			linter: "git-flow",
			a: []*github.CommitFile{
				{
					Filename: github.String("main.c"),
				},
				{
					Filename: github.String("main.cpp"),
				},
			},
			langs:    []string{".c", ".go"},
			expected: true,
		},
	}

	for _, tc := range tcs {
		t.Run(tc.name, func(t *testing.T) {
			RegisterLinterLanguages(tc.linter, tc.langs)
			p, err := NewGithubProvider(context.TODO(), nil, github.PullRequestEvent{}, WithPullRequestChangedFiles(tc.a))
			if err != nil {
				t.Errorf("failed to create github provider: %v", err)
			}
			actual := LinterRelated(tc.linter, Agent{
				Provider: p,
			})
			if actual != tc.expected {
				t.Errorf("expected %v, got %v, linter: %v, PR: %v", tc.expected, actual, tc.linter, tc.a)
			}
		})
	}
}
